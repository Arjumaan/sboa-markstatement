
Course syllabus
Prerequisites
To take this course, you don't need any developer experience, but you must be eager to get started with coding.  

Module 1
In the first module,  you will start with an introduction to the course and gain insight into what your career path as an HTML and CSS developer might look like. You will also receive tips on how to take this course successfully. Then, you'll move on to semantic tags and the importance of taking a structured approach to creating a well-formed web page. After which you will learn about metadata and tags and how you can use them to influence your web page's ranking through Search Engine Optimization (SEO). Following this section, you will learn about user input and forms and you will create and test a form by yourself. In the final part of the module, you will learn about media elements and you'll learn how to embed video and audio on a web page.  

After completing this module you should be able to: 

Use common semantic and meta tags to improve the accessibility, readability and SEO of a web page.

Create commonly-used web page layouts and components.   

Create and test a form with client-side validation.   

Recognize server-side connections and the languages used to carry out requests and responses.  

Post form data to a server. 

Create a video and audio player that can rate the media played. 

Module 2
In module 2, you will focus on CSS layouts, grids and flexboxes. You will learn about fundamental layouts that you can use to design a good web page. Next, you will learn about CSS selectors which correspond to specific elements or element groups in an HTML document. In this section, you also learn about pseudo-class selectors that you can use to improve the interactivity of your web pages without having to add overly advanced styling. In this module, you will also learn about keyframes, animations and effects in CSS. The final part of this module is about how to use browser developer tools to assist with debugging and resolving HTML and CSS issues.

After completing this module you should be able to:

Use Flexbox and CSS grids to create responsive layouts and charts. 

Use advanced CSS selectors such as pseudo-classes for targeted styling. 

Use CSS effects to introduce text effects, animations and transformations into your stylesheet. 

Create simple keyframe animations.  

Perform basic front-end testing, debugging and error handling.   

Adapt your CSS to perform as expected in different browsers. 

Module 3
In the last module, you will have an opportunity to recap what you learned in the course and put it into practice by creating a home page for a client persona.

After completing this module you should be able to:

Apply the skills you learned in this course to introduce more advanced styling into your portfolio. __________________________________________________________________________________________________________________________________________________________

How to be successful in this course
Taking an online course can be overwhelming. How do you learn at your own pace and successfully achieve your goals? 

Here are some general tips that can help you stay focused and on track.

Set daily goals for studying 
Ask yourself what you hope to accomplish in your course each day. Setting a clear goal can help you stay motivated and beat procrastination. The goal should be specific and easy to measure, such as "I’ll watch all the videos in Module 2 and complete the first programming assignment". And don’t forget to reward yourself when you make progress towards your goal! 

Create a dedicated study space 
It’s easier to recall information if you’re in the same place where you first learned it, so having a dedicated space at home to take online courses can make your learning more effective. Remove any distractions from the space and if possible, make it separate from your bed or sofa. A clear distinction between where you study and where you take breaks can help you focus.  

Schedule time to study on your calendar 
Open your calendar and choose a predictable, reliable time that you can dedicate to watching lectures and completing assignments. This helps ensure that your courses won’t become the last thing on your to-do list. 

Tip: You can add deadlines for a Coursera course to your Google calendar, Apple calendar, or another calendar app.

Keep yourself accountable 
Tell your friends about the courses you’re taking, post achievements to your social media accounts or blog about your homework assignments. Having a community and support network of friends and family to cheer you on makes a difference!

Actively take notes 
Taking notes can promote active thinking, boost comprehension and extend your attention span. It’s a good strategy to internalize knowledge whether you’re learning online or in the classroom. So, grab a notebook or find a digital app that works best for you and start synthesizing key points. 

Tip: While watching a lecture on Coursera, you can click the 'Save Note' button below the video to save a screenshot to your course notes and add your own comments.

Join the discussion 
Course discussion forums are a great place to ask questions about assignments, discuss topics, share resources and make friends. Our research shows that learners who participate in the discussion forums are 37% more likely to complete a course. So make a post today! 

Do one thing at a time 
Multitasking is less productive than focusing on a single task at a time. Researchers from Stanford University found that “People who are regularly bombarded with several streams of electronic information cannot pay attention, recall information or switch from one job to another as well as those who complete one task at a time.” Stay focused on one thing at a time. You’ll absorb more information and complete assignments with greater productivity and ease than if you were trying to do many things at once.  

Take breaks 
Resting your brain after learning is critical to high performance. If you find yourself working on a challenging problem without much progress for an hour, take a break. Walking outside, taking a shower or talking with a friend can help you to re-energize and even give you new ideas on how to tackle the project. 

Your learning journey starts now!  
While preparing for the module quiz or working on achieving your learning goals you're encouraged to:   

Work through each lesson in the learning pathway. Try not to skip any activities or lessons unless you are certain that you already know this information well enough to move ahead.    

Take the opportunity to go back and watch a video or read all the information provided before moving on to the next lesson or module.  

Complete all the knowledge and module quizzes and exercises.

Read the feedback carefully when answering quizzes, as this will help you to reinforce what you are learning.  

Make use of the practical learning environment provided by the exercises. You can gain substantial reinforcement of your learning through the step-by-step application of your skills.
__________________________________________________________________________________________________________________________________________________________

Working with labs in this course
Throughout this course, you will be completing labs in a virtual coding environment. The purpose of these labs is to give you an opportunity to apply what you learn. You will be doing things like creating a basic login form for a website, a table booking form and a web page for rating a video. And that's just in the first module! In module 2 you'll create a grid layout and a restaurant menu and you'll practice the transform and transition properties in CSS. And, in the final module, there is a lab that will allow you to work in VS Code for the portfolio project without downloading it to your computer. 

To complete some of the labs you need to be able to see your rendered HTML in a browser. To view the rendered HTML on a web page follow the step-by-step instructions below.

Step 1: Save the file.

Step 2: Click on 'Go live' at the bottom right of your editor.



Once the server is up and running you'll see the exposed port.  



Step 3: Click on browser preview.  


Step 4: Enter the url as http://localhost:5500 


Step 5: Check that the web page displays.

After completing your lab, don't forget to close the server. You can close the server by clicking on the exposed Port number (e.g. 5500) after completing the lab.


You should see a notification like this which confirms the server has been stopped.  


__________________________________________________________________________________________________________________________________________________________

Semantic HTML cheat sheet
There are hundreds of semantic tags available to help describe the meaning of your HTML documents. Below is a cheat sheet with some of the most common ones you’ll use in this course and in your development career.

Sectioning tags
Use the following tags to organize your HTML document into structured sections. 

<header>
The header of a content section or the web page. The web page header often contains the website branding or logo.

<nav>
The navigation links of a section or the web page.

<footer>
The footer of a content section or the web page. On a web page, it often contains secondary links, the copyright notice, privacy policy and cookie policy links.

<main>
Specifies the main content of a section or the web page.

<aside>
A secondary set of content that is not required to understand the main content.

<article>
An independent, self-contained block of content such as a blog post or product.

<section>
A standalone section of the document that is often used within the body and article elements.

<details>
A collapsed section of content that can be expanded if the user wishes to view it.

<summary>
Specifies the summary or caption of a <details> element.

<h1><h2><h3><h4><h5><h6>
Headings on the web page. <h1> indicates the most important heading whereas <h6> indicates the least important. 

Content tags
<blockquote>
Used to describe a quotation.

<dd>
Used to define a description for the preceding <dt> element.

<dl>
Used to define a description list.

<dt>
Used to describe terms inside <dl> elements.

<figcaption>
Defines a caption for a photo image.

<figure>
Applies markup to a photo image.

<hr>
Adds a horizontal line to the parent element.

<li>
Used to define an item within a list.

<menu>
A semantic alternative to <ul> tag.

<ol>
Defines an ordered list.

<p>
Defines a paragraph.

<pre>
Used to represent preformatted text. Typically rendered in the web browser using a monospace font.

<ul>
Unordered list

Inline tags
<a>
An anchor link to another HTML document.

<abbr>
Specifies that the containing text is an abbreviation or acronym.

<b>
Bolds the containing text. When used to indicate importance use <strong> instead.

<br>
A line break. Moves the subsequent text to a new line.

<cite>
Defines the title of creative work (for example a book, poem, song, movie, painting or sculpture). The text in the <cite> element is usually rendered in italics.

<code>
Indicates that the containing text is a block of computer code.

<data>
Indicates machine-readable data.

<em>
Emphasizes the containing text.

<i>
The containing text is displayed in italics. Used to indicate idiomatic text or technical terms.

<mark>
The containing text should be marked or highlighted.

<q>
The containing text is a short quotation.

<s>
Displays the containing text with a strikethrough or line through it.

<samp>
The containing text represents a sample.

<small>
Used to represent small text, such as copyright and legal text.

<span>
A generic element for grouping content for CSS styling.

<strong>
Displays the containing text in bold. Used to indicate importance.

<sub>
The containing text is subscript text, displayed with a lowered baseline.

<sup>
The containing text is superscript text, displayed with a raised baseline.

<time>
A semantic tag used to display both dates and times.

<u>
Displays the containing text with a solid underline.

<var>
The containing text is a variable in a mathematical expression.

Embedded content and media tags
<audio>
Used to embed audio in web pages.

<canvas>
Used to render 2D and 3D graphics on web pages.

<embed>
Used as a containing element for external content provided by an external application such as a media player or plug-in application. 

<iframe>
Used to embed a nested web page. 

<img>
Embeds an image on a web page.

<object>
Similar to <embed> but the content is provided by a web browser plug-in.

<picture>
An element that contains one <img> element and one or more <source> elements to offer alternative images for different displays/devices.

<video>
Embeds a video on a web page.

<source>
Specifies media resources for <picture>, <audio> and<video> elements.

<svg>
Used to define Scalable Vector Graphics within a web page.

Table tags
<table>
Defines a table element to display table data within a web page.

<thead>
Represents the header content of a table. Typically contains one <tr> element.

<tbody>
Represents the main content of a table. Contains one or more <tr>elements.

<tfoot>
Represents the footer content of a table. Typically contains one <tr> element.

<tr>
Represents a row in a table. Contains one or more <td> elements when used within <tbody> or <tfoot>. When used within <thead>, contains one or more <th> elements.

<td>
Represents a cell in a table. Contains the text content of the cell.

<th>
Defines a header cell of a table. Contains the text content of the header.

<caption>
Defines the caption of a table element.

<colgroup>
Defines a semantic group of one or more columns in a table for formatting.

<col>
Defines a semantic column in a table.
__________________________________________________________________________________________________________________________________________________________

Metadata cheat sheet
HTML <meta> tags 
Earlier in the course, you learned about meta tags and how you can leverage them to convey information to search engines to better categorize your pages. We recommend that you keep this cheat sheet handy when building your web applications. The structure of a meta tag is as follows.

Name 
The name of the property can be anything you like, although browsers usually expect a value they understand and can take an action upon. An example would be <meta name="author" content="name"> to state the author of the page. 

Content 

The content field specifies the property's value. For example, you can use <meta name="language" content="english">, to specify the language of the webpage to search engines. 

Charset 

The charset is a special field that lets you specify the character encoding used for the page so that the browser can display it properly. The most frequently used is utf-8, and you would add it to your HTML header as follows: <meta charset="UTF-8">  

HTTP-equiv 

This field stands for HTTP equivalent, and it’s used to simulate HTTP response headers. This is rare to see, and it’s recommended to use HTTP headers over HTML http-equiv meta tags. For example, the next tag would instruct the browser to refresh the page every 30 minutes: <meta http-equiv="refresh" content="30"> 


Basic meta tags (meta tags For SEO) 
<meta name="description"/> provides a brief description of the web page 

<meta name=”title”/> specifies the title of the web page 

<meta name="author" content="name"> specifies the author of the web page  

<meta name="language" content="english"> specifies the language of the web page 


<meta name="robots" content="index,follow" /> tells search engines how to crawl or index a certain page 

<meta name="google"/> tells Google not to show the sitelinks search box for your page when showing search results 

<meta name="googlebot" content=”notranslate” /> tells Google you don’t want to provide an automatic translation for your page if the user uses a different language  

<meta name="revised" content="Sunday, July 18th, 2010, 5:15 pm" /> specifies the last modified date and time on which you have made certain changes 

<meta name="rating" content="safe for kids"> specifies the expected audience for your page 

<meta name="copyright" content="Copyright 2022"> specifies a Copyright 


<meta http-equiv="..."/> tags
 <meta http-equiv="content-type" content="text/html"> specifies the format of the document returned by the server 

<meta http-equiv="default-style"/>  specifies the format of the styling document 

<meta http-equiv="refresh"/> specifies the duration of the page before it’s considered stale 

<meta http-equiv=”Content-language”/> specifies the language of the page 

<meta http-equiv="Cache-Control" content="no-cache"> instructs the browser how to cache your page 

Responsive design/mobile meta tags 
<meta name="format-detection" content="telephone=yes"/> indicates that telephone numbers should appear as hypertext links that can be clicked to make a phone call 

<meta name="HandheldFriendly" content="true"/> specifies that the page can be properly visualized on mobile devices 

<meta name="viewport" content="width=device-width, initial-scale=1.0"/> specifies the area of the window in which web content can be seen

__________________________________________________________________________________________________________________________________________________________

Layout design
As you build web pages throughout your career, you’ll notice that many pages follow similar layouts and structures. This is the outcome of many years of research into user interface design and user experience. Different companies, libraries and frameworks then adopt the resulting best practices.

Many examples of these layouts can be seen in the popular bootstrap framework. However, many other frameworks provide similar designs.

Top navbar layout
Websites often have a top navbar layout to provide a set of essential anchor links to the user. These typically link to the main areas of the website, such as product pages, careers pages or contact pages. This provides the visitor to the website with a consistent navigation experience.

Example of a top navbar layout on a web page.
Carousel layout
Product-focused websites often use a large carousel on their homepage to highlight their featured products, discounts and offers. The carousel contains content items that will rotate through the carousel area at a fixed interval.

Example of a Carousel Layout on a web page
Blog layout
The blog layout is used to feature multiple content items of differing importance. It is often seen on news websites where new articles will appear on the page each day based on current events.

Example of a large style Blog Layout on a web page
The layout typically features different-sized feature areas followed by a series of article summary areas that link to full articles.

Example of a regular style Blog Layout ron a web page
Dashboard layout
Dashboard layouts are often used in enterprise software for managing various web applications. They typically feature a sidebar for navigation with the main content area containing forms for configuration or reporting data such as graphs and tables. This trendy layout provides a good user experience for business users.

Example of a Dashboard Layout on a web page
More layouts
You can explore more of these layouts on the bootstrap examples page in the additional resources.

Consider these layouts when building websites and web applications so that you provide your audience with the best user experience possible.
__________________________________________________________________________________________________________________________________________________________

Social media cards
Introduction
Before Facebook introduced the Open Graph Protocol (OGP), search engine web crawlers, including social media websites, used the internal heuristics of a website to make the best possible guess in terms of the title, description, and preview images to be used for the content. 

This often led to social networks having difficulty interpreting the post or information shared in the URL provided. Even today, when you open a link for a website, the preview generated is often an out-of-scale or random image that is possibly embedded somewhere within the web page. This is where meta tags help the end-user take better control of their content.

Over the years, the successful implementation of OGP has led other social media giants, including sister companies owned by Meta, to adopt the protocol to improve the user experience. These platforms have their meta tags that prefix and replace ‘og’ that you have encountered earlier in the course.  

Need for social media cards
With the number of users and the use of Internet marketing on the rise, user attention is the currency. It is said that a picture is worth a thousand words, and the internet is living proof of this: a caption and image can drive users toward or away from a website. The following image is an example of a social media card for this course:


The title and description shared with a URL should summarize the contents of a web page. Sometimes, it may refer to generic information about the entire website. For others, you may tailor the social media (SM) card for a specific page on a website that you’re sharing. The following image is an example of a social card for this course when shared on social media:


The type OGP tag
‘type’ is an important OGP tag in SM cards that helps describe the details of a link, like if it’s a book, an article, or a movie. It provides more detailed metadata for specific types. For example, in the case of the music type, you can add details for the song, album, duration, or any other information about the song. For a regular user scrolling through social media, the link provided with the image preview has only one chance and a moment’s attention to make a good impression. In such cases, the role of social media cards becomes very important.

Social media cards and SEO
Today's internet is an interconnected graph that is internally a web of URL links, web crawlers, and search engine optimization tools. Together, a web page’s image and title are the store front to invite the user. But social media cards also play an important role in boosting the rankings for the web crawlers used by search engines. They provide the crawlers with the necessary information to build metadata that eventually helps rank websites. Additionally, it also helps track traffic to your website. 

While it’s advised to stick to the required tags in social media cards, a developer can also use auxiliary tags that may be suitable. For example, the use of the video tag helps to play in line when displayed on social media websites like Meta. 

Meta also has a dedicated page to assist developers that you can find in the additional resources for this section. 

Conclusion
You should now be more familiar with social media cards, including their importance and benefits. Effective social media cards help to inform Internet users about your website and drive traffic towards it. The extra time a developer spends adding social media tags is worth the effort! 
__________________________________________________________________________________________________________________________________________________________

Additional resources
The following resources will be helpful as additional references in dealing with different concepts related to the topics you have covered in this section. 

HTML meta tags: https://www.dofactory.com/html/metatags

Semantic elements: https://www.freecodecamp.org/news/semantic-html5-elements/

Simple bare bones HTML webpage: https://www.instructables.com/Bare-Bones-Web-Page/

HTML5/CSS bare-bones newsletter template: https://www.vandelaydesign.com/newsletter-tutorial/

Add open graph social metadata- https://www.digitalocean.com/community/tutorials/how-to-add-twitter-card-and-open-graph-social-metadata-to-your-webpage-with-html

Essential meta tags for social media: https://css-tricks.com/essential-meta-tags-social-media/

The meta element: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta

Open graph protocol: https://ogp.me/

Using open graph protocol on website: https://www.freecodecamp.org/news/what-is-open-graph-and-how-can-i-use-it-for-my-website/

Meta OGP guide for webmasters: https://developers.facebook.com/docs/sharing/webmasters/

Bootstrap with HTML: https://www.bootstrapdash.com/blog/use-bootstrap-with-html

Bootstrap Layout Examples: https://getbootstrap.com/docs/5.2/examples/
__________________________________________________________________________________________________________________________________________________________

Input types
You already learned about the input HTML tag and how the type property determines the data your users can type in. This cheat sheet should be a reference to decide what type best suits your use case. Most of the inputs go hand in hand with the label tag for best accessibility practices.

Button
This displays a clickable button and it’s mostly used in HTML forms to activate a script when clicked. <input type="button" value="Click me" onclick="msg()" />

Keep in mind you can also define buttons with the <button> tag, with the added benefit of being able to place content like text or images inside the tag.

1234
<button onclick="alert('Are you sure you want to continue?')"> 
    <img src="https://yourserver.com/button_img.jpg" 
        alt="Submit the form" height="64" width="64">
 </button> 
Checkbox
Defines a check box allowing single values to be selected or deselected. They are used to let a user select one or more options of a limited number of choices.

1234
<input type="checkbox" id="dog" name="dog" value="Dog">
<label for="dog">I like dogs</label>
<input type="checkbox" id="cat" name="cat" value="Cat">
<label for="cat">I like cats</label>
Radio
Displays a radio button, allowing only a single value to be selected out of multiple choices. They are normally presented in radio groups, which is a collection of radio buttons describing a set of related options that share the same "name" attribute.

1234
<input type="radio" id="light" name="theme" value="Light"> 
<label for="light">Light</label> 
<input type="radio" id="dark" name="theme" value="Dark"> 
<label for="dark">Dark</label> 
Submit
Displays a submit button for submitting all values from an HTML form to a form-handler, typically a server. The form-handler is specified in the form’s "action" attribute:

1234
<form action="myserver.com" method="POST">
  …
<input type="submit" value="Submit" />
</form>
Text
Defines a basic single-line text field that a user can enter text into. 

12
<label for="fname">First name:</label> 
<input type="text" id="fname" name="fname"> 
Password
Defines a single-line text field whose value is obscured, suited for sensitive information like passwords.

12
<label for="pwd">Password:</label> 
<input type="password" id="pwd" name="pwd"> 
Date
Displays a control for entering a date with no time (year, month and day).

12
<label for="dob">Date of birth:</label>
<input type="date" id="dob" name="date of birth">
Datetime-local
Defines a control for entering a date and time, including the year, month and day, as well as the time in hours and minutes.

12
<label for="birthdaytime">Birthday (date and time):</label>
<input type="datetime-local" id="birthdaytime" name="birthdaytime">
Email
Defines a field for an email address. It’s similar to a plain text input, with the addition that it validates automatically when submitted to the server.

12
<label for="email">Enter your email:</label>
<input type="email" id="email" name="email">
File
Displays a control that lets the user select and upload a file from their computer. To define the types of files permissible you can use the "accept" attribute. Also, to enable multiple files to be selected, add the "multiple" attribute.

12
<label for="myfile">Select a file:</label>
<input type="file" id="myfile" name="myfile">
Hidden
Defines a control that is not displayed but whose value is still submitted to the server.

1
<input type="hidden" id="custId" name="custId" value="3487">
Image
Defines an image as a graphical submit button. You should use the “src” attribute to point to the location of your image file.

1
<input type="image"src="submit_img.png" alt="Submit" width="48" height="48">
Number
Defines a control for entering a number. You can use attributes to specify restrictions, such as min and max values allowed, number intervals or a default value.

1
<input type="number" id="quantity" name="quantity" min="1" max="5">
Range
Displays a range widget for specifying a number between two values. The precise value, however, is not considered important. This is typically represented using a slider or dial control. To define the range of acceptable values, use the “min” and “max” properties.

12
<label for="volume">Volume:</label>
<input type="range" id="volume" name="volume" min="0" max="10">
Reset
Displays a button that resets the contents of the form to their default values.

1
<input type="reset">
Search
Defines a text field for entering a search query. These are functionally identical to text inputs, but may be styled differently depending on the browser.

12
<label for="gsearch">Search in Google:</label>
<input type="search" id="gsearch" name="gsearch">
Time
Displays a control for entering a time value in hours and minutes, with no time zone.

12
<label for="appt">Select a time:</label>
<input type="time" id="appt" name="appt">
Tel
Defines a control for entering a telephone number. Browsers that do not support “tel” fall back to standard text input. You can optionally use the "pattern" field to perform validation.

12
<label for="phone">Enter your phone number:</label>
<input type="tel" id="phone" name="phone" pattern="[+]{1}[0-9]{11,14}">
Url
Displays a field for entering a text URL. It works similar to a text input, but performs automatic validation before being submitted to the server.

12
<label for="homepage">Add your homepage:</label>
<input type="url" id="homepage" name="homepage">
Week
Defines a control for entering a date consisting of a week-year number and a year, with no time zone. Keep in mind that this is a newer type that is not supported by all the browsers.

12
<label for="week">Select a week:</label>
<input type="week" id="week" name="week">
Month
Displays a control for entering a month and year, with no time zone. Keep in mind that this is a newer type that is not supported by all the browsers.

12
__________________________________________________________________________________________________________________________________________________________

